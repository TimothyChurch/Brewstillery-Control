[
  {
    "id": "b4973237.46ab6",
    "type": "subflow",
    "name": "Process Simulation",
    "info": "",
    "category": "",
    "in": [
      {
        "x": 37,
        "y": 103,
        "wires": [
          {
            "id": "ec719d4d.0d54f8"
          }
        ]
      }
    ],
    "out": [
      {
        "x": 728.5,
        "y": 294,
        "wires": [
          {
            "id": "ae1a6e5.d4c0d9",
            "port": 0
          }
        ]
      }
    ],
    "env": [],
    "color": "#DDAA99"
  },
  {
    "id": "7fe4b5c3.32e58c",
    "type": "function",
    "z": "b4973237.46ab6",
    "name": "30 sec RC + 20",
    "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 30*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue + 20;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 626.5,
    "y": 207,
    "wires": [
      [
        "ae1a6e5.d4c0d9"
      ]
    ]
  },
  {
    "id": "1bacd004.9753c",
    "type": "inject",
    "z": "b4973237.46ab6",
    "name": "Inject -0.2 at start",
    "repeat": "",
    "crontab": "",
    "once": true,
    "topic": "",
    "payload": "-0.2",
    "payloadType": "num",
    "x": 134.5,
    "y": 30,
    "wires": [
      [
        "ec719d4d.0d54f8"
      ]
    ]
  },
  {
    "id": "999a52c2.f465f",
    "type": "function",
    "z": "b4973237.46ab6",
    "name": "10 sec RC",
    "func": "// Applies a simple RC low pass filter to incoming payload values\nvar tc = 10*1000;       // time constant in milliseconds\n\nvar lastValue = context.get('lastValue');\nif (typeof lastValue == \"undefined\") lastValue = msg.payload;\nvar lastTime = context.get('lastTime') || null;\nvar now = new Date();\nvar currentValue = msg.payload;\nif (lastTime === null) {\n    // first time through\n    newValue = currentValue;\n} else {\n    var dt = now - lastTime;\n    var newValue;\n    \n    if (dt > 0) {\n        var dtotc = dt / tc;\n        newValue = lastValue * (1 - dtotc) + currentValue * dtotc;\n    } else {\n        // no time has elapsed leave output the same as last time\n        newValue = lastValue;\n    }\n}\ncontext.set('lastValue', newValue);\ncontext.set('lastTime', now);\n\nmsg.payload = newValue;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 451,
    "y": 207,
    "wires": [
      [
        "7fe4b5c3.32e58c"
      ]
    ]
  },
  {
    "id": "ec719d4d.0d54f8",
    "type": "delay",
    "z": "b4973237.46ab6",
    "name": "",
    "pauseType": "delay",
    "timeout": "1",
    "timeoutUnits": "seconds",
    "rate": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "x": 268,
    "y": 104,
    "wires": [
      [
        "ede39236.1961f8"
      ]
    ]
  },
  {
    "id": "a823c9cf.2a6178",
    "type": "function",
    "z": "b4973237.46ab6",
    "name": "2 msg transport delay",
    "func": "// stores messages in a fifo until the specified number have been received, \n// then releases them as new messages are received.\n// during the filling phase the earliest message is passed on each time \n// a message is received, but it is also left in the fifo\nvar fifoMaxLength = 2;\nvar fifo = context.get('fifo') || [];\n// push the new message onto the top of the array, messages are shifted down and\n// drop off the front\nvar length = fifo.push(msg);  // returns new length\nif (length > fifoMaxLength) {\n    newMsg = fifo.shift();\n} else {\n    // not full yet, make a copy of the msg and pass it on\n    var newMsg = JSON.parse(JSON.stringify(fifo[0]));\n}\ncontext.set('fifo', fifo);\nreturn newMsg;",
    "outputs": 1,
    "noerr": 0,
    "x": 258,
    "y": 208,
    "wires": [
      [
        "999a52c2.f465f"
      ]
    ]
  },
  {
    "id": "ae1a6e5.d4c0d9",
    "type": "function",
    "z": "b4973237.46ab6",
    "name": "Clear all except payload",
    "func": "msg2 = {payload: msg.payload};\nreturn msg2;",
    "outputs": 1,
    "noerr": 0,
    "x": 545,
    "y": 293,
    "wires": [
      []
    ]
  },
  {
    "id": "ede39236.1961f8",
    "type": "range",
    "z": "b4973237.46ab6",
    "minin": "0",
    "maxin": "1",
    "minout": "0",
    "maxout": "100",
    "action": "scale",
    "round": false,
    "name": "",
    "x": 87,
    "y": 208,
    "wires": [
      [
        "a823c9cf.2a6178"
      ]
    ]
  }
]